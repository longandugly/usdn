package main

import (
	"log"

	"./common"
	"./djstl"
	"./openflow"
	"./tools"
	"github.com/digitalocean/go-openvswitch/ovs"

	//"reflect"
	"database/sql"
	"encoding/json"
	"strconv"

	"github.com/albertorestifo/dijkstra"
	_ "github.com/mattn/go-sqlite3"
)

var cur openflow.Table

func main() {
	//create veth pair: veth0 veth1
	/*
		veth1 connect to br0 #ovs-vsctl add-port br0 veth1
		veth0 set private ip #ifconfig veth0 10.99.0.1 netmask 255.255.255.0
	*/
	db, _ := sql.Open("sqlite3", "./usdn.db")
	//checkErr(err)
	sql_table := `create table macinfo ( list text);`
	db.Exec(sql_table)
	cur.Current_table = 0
	veth0, veth1, err := Veth("veth0", "veth1")
	if err != nil {
		log.Println(err)
	}
	log.Println(veth0.Attrs().Name, ":", veth0.Attrs().HardwareAddr)
	log.Println(veth1.Attrs().Name, ":", veth1.Attrs().HardwareAddr)
	//set ip for veth0
	//local_ip from api
	local_ip := "10.99.0.3/24"
	if err := common.Setip(local_ip, "veth0"); err != nil {
		panic(err)
	}
	log.Println(veth0.Attrs().Name, ":", "10.99.0.3/24")

	c := ovs.New(
		// Prepend "sudo" to all commands.
		ovs.Sudo(),
	)
	//create bridge br0
	common.CreateBridge(c, "br0")
	//add port veth1 to br0
	common.AddPort(c, "br0", "veth1")
	out, _ := openflow.GetPorts(c, "veth1")
	//表
	log.Println("veth1 out to :", out)
	openflow.Addflow(c, "br0", "46:d0:28:82:9b:49", out, 0)
	//add port port to br0




	/*              for                    */
	//add port AddPort("br0","port-name")
	var a []string = []string{"10.22.52.86", "10.22.52.93"}
	//add vxlan 接口
	common.AddVxlan(c, a, "br0")
	//生成arp
	b := map[string]string{
		"10.99.0.1": "82:cf:82:f5:5a:a6",
		"10.99.0.2": "da:60:69:0e:c2:39",
	}
	common.Neigh_arp(b)

	g := dijkstra.Graph{
		"10.3.6.194":  {"10.22.52.86": 5, "10.22.52.93": 10},
		"10.22.52.86": {"10.3.6.194": 6, "10.22.52.93": 4},
		"10.22.52.93": {"10.3.6.194": 10, "10.22.52.86": 4},
	}
	re := djstl.Compute(g, "10.3.6.194")




	var k string
	stmt, _ := db.Prepare("select list from macinfo;")
	err = stmt.QueryRow().Scan(&k)
	log.Println("old path:", k)

	var a []string = []string{"10.22.52.86", "10.22.52.93"}
	//add vxlan 接口
	common.AddVxlan(c, a, "br0")
	//生成arp
	b := map[string]string{
		"10.99.0.1": "82:cf:82:f5:5a:a6",
		"10.99.0.2": "da:60:69:0e:c2:39",
	}
	common.Neigh_arp(b)
	mjson, _ := json.Marshal(re)
	mString := string(mjson)
	if k != mString {
		stmt, err = db.Prepare("update macinfo set list=?")
		res, err := stmt.Exec(mString)
		log.Println(re, "res", res, err)
		//下发流表
		//ovs-ofctl add-flow br0  table=0,dl_dst=46:d0:28:82:9b:49,actions=output:3 -O OpenFlow13
		moren := map[string]string{
			"82:cf:82:f5:5a:a6": "10.22.52.86",
		}

		for k, v := range moren {
			in_pot := tools.InetAtoN(v)
			out, _ := openflow.GetPorts(c, strconv.Itoa(int(in_pot)))
			//openflow.Addflow(c,"br0",v,out,cur.Current_table)
			if cur.Current_table == 0 {
				cur.Current_table = 1
			} else if cur.Current_table == 1 {
				cur.Current_table = 2
			} else if cur.Current_table == 2 {
				cur.Current_table = 1
			}
			t0 := openflow.NewTable(cur.Current_table, k)
			t0.Add(c, out)
			//table 0 指向 cur.table
			t0 = openflow.NewTable(0, v)
			t0.Change(c, cur.Current_table)
			//清空旧的流表
			openflow.Delflow(cur.Current_table)
		}
		//计算
		db.Close()
	}
	//id, err := res.LastInsertId()
	//og.Println(id,err)

}
